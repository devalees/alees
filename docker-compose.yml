version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: alees_postgres # Optional: Explicit container name
    environment:
      # Using .env file is primary way to set these for local dev
      POSTGRES_DB: ${DB_NAME:-alees}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432" # Allow overriding port via .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-alees}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: alees_redis # Optional: Explicit container name
    ports:
      - "${REDIS_PORT:-6379}:6379" # Allow overriding port via .env
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-your-redis-password}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your-redis-password}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    # --- Define the image name and build context ---
    image: alees_app:latest # Define a name and tag for your image
    build:
       context: .
       dockerfile: Dockerfile
    # --- End Changes ---
    container_name: alees_api
    entrypoint: /app/entrypoint.sh
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app # Mount current directory to /app in container for development
      - ./media:/app/media # Mount local media if using FileSystemStorage
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-config.settings.dev}
      - RUN_MIGRATIONS=true # Signal this service to run migrations
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery:
    # --- Reference the named image (DO NOT BUILD HERE) ---
    image: alees_app:latest # Use the same image tag built by 'api' service
    # --- End Changes ---
    container_name: alees_celery
    entrypoint: /app/entrypoint.sh
    command: celery -A config.celery_app worker -l INFO
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-config.settings.dev}
      # RUN_MIGRATIONS is NOT set here, so entrypoint skips migrate
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  celery-beat:
    # --- Reference the named image (DO NOT BUILD HERE) ---
    image: alees_app:latest # Use the same image tag built by 'api' service
    # --- End Changes ---
    container_name: alees_celery_beat
    entrypoint: /app/entrypoint.sh
    command: celery -A config.celery_app beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-config.settings.dev}
      # RUN_MIGRATIONS is NOT set here, so entrypoint skips migrate
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  test:
    # --- Reference the named image (DO NOT BUILD HERE) ---
    image: alees_app:latest # Use the same image tag built by 'api' service
    # --- End Changes ---
    container_name: alees_test
    entrypoint: /app/entrypoint.sh
    command: pytest -v --cov=. --cov-report=term-missing
    volumes:
      - .:/app
    env_file:
      - .env.test
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.test
      - TEST_DB_NAME=${TEST_DB_NAME:-test_alees}
      - TEST_DB_USER=${TEST_DB_USER:-postgres}
      - TEST_DB_PASSWORD=${TEST_DB_PASSWORD:-postgres}
      - TEST_DB_HOST=postgres
      - TEST_DB_PORT=5432
      - CELERY_TASK_ALWAYS_EAGER=True
      - CELERY_TASK_EAGER_PROPAGATES=True
      - CELERY_BROKER_URL=memory://
      - CELERY_RESULT_BACKEND=cache+memory://
      - DEBUG=0
      # RUN_MIGRATIONS is NOT set here, but entrypoint handles test migration separately
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data: