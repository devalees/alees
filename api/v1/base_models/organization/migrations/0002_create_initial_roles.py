# Generated by Django 4.2.20 on 2025-05-03 02:30

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType

# --- Role/Permission Definitions --- 
ROLES_PERMISSIONS = {
    'Organization Admin': [
        # Contact Permissions
        ('contact', 'contact', 'view_contact'),
        ('contact', 'contact', 'add_contact'),
        ('contact', 'contact', 'change_contact'),
        ('contact', 'contact', 'delete_contact'),
        # Membership Permissions (can manage others in their org)
        ('api_v1_organization', 'organizationmembership', 'view_organizationmembership'),
        ('api_v1_organization', 'organizationmembership', 'add_organizationmembership'),
        ('api_v1_organization', 'organizationmembership', 'change_organizationmembership'),
        ('api_v1_organization', 'organizationmembership', 'delete_organizationmembership'),
        # Optional: Maybe Org Admin can change Org details?
        # ('api_v1_organization', 'organization', 'change_organization'),
    ],
    # Add Editor role with specific permissions
    'Editor': [
        ('contact', 'contact', 'view_contact'),
        ('contact', 'contact', 'add_contact'),
        ('contact', 'contact', 'change_contact'),
        ('api_v1_organization', 'organizationmembership', 'view_organizationmembership'),
        ('api_v1_organization', 'organizationmembership', 'add_organizationmembership'),
        ('api_v1_organization', 'organizationmembership', 'change_organizationmembership'),
    ],
    'Member': [
        # Contact Permissions (can manage their own contacts - or all in org? TBD)
        ('contact', 'contact', 'view_contact'),
        ('contact', 'contact', 'add_contact'),
        ('contact', 'contact', 'change_contact'), # Maybe remove delete?
        ('contact', 'contact', 'delete_contact'),
        # Membership Permissions (can view their own membership, maybe others in org?)
        ('api_v1_organization', 'organizationmembership', 'view_organizationmembership'),
        # Removed add from Member for now
        # ('api_v1_organization', 'organizationmembership', 'add_organizationmembership'), 
    ],
    'Viewer': [
        # Contact Permissions
        ('contact', 'contact', 'view_contact'),
        # Membership Permissions
        ('api_v1_organization', 'organizationmembership', 'view_organizationmembership'),
    ],
}

def create_initial_organization_roles(apps, schema_editor):
    """Create initial RBAC roles (Groups) for organizations."""
    # Use historical models from `apps` registry
    GroupModel = apps.get_model('auth', 'Group')
    PermissionModel = apps.get_model('auth', 'Permission')
    ContentTypeModel = apps.get_model('contenttypes', 'ContentType')
    db_alias = schema_editor.connection.alias

    print("\nCreating/Updating Initial RBAC Roles:")

    for role_name, perms_to_assign in ROLES_PERMISSIONS.items():
        role, created = GroupModel.objects.using(db_alias).get_or_create(name=role_name)
        print(f"    - {'Creating' if created else 'Updating'} group: {role_name}")
        permissions_to_set = []
        for app_label, model_name, codename in perms_to_assign:
            try:
                content_type = ContentTypeModel.objects.using(db_alias).get(
                    app_label=app_label,
                    model=model_name
                )
                permission = PermissionModel.objects.using(db_alias).get(
                    content_type=content_type,
                    codename=codename
                )
                permissions_to_set.append(permission)
            except ContentTypeModel.DoesNotExist:
                print(f"      Warning: ContentType {app_label}.{model_name} not found. Skipping permission '{codename}'.")
            except PermissionModel.DoesNotExist:
                print(f"      Warning: Permission {app_label}.{codename} not found for model {model_name}. Skipping.")

        if permissions_to_set:
            print(f"      Assigning {len(permissions_to_set)} permissions.")
            role.permissions.set(permissions_to_set)
        else:
            print("      No permissions found or assigned for this role.")

def remove_initial_organization_roles(apps, schema_editor):
    """Remove the initial RBAC roles.
       NOTE: This is generally not recommended as it could break existing assignments.
       Consider just clearing permissions instead of deleting groups.
    """
    GroupModel = apps.get_model('auth', 'Group')
    db_alias = schema_editor.connection.alias
    roles_to_delete = ROLES_PERMISSIONS.keys()

    print(f"\nAttempting to delete roles: {list(roles_to_delete)}")
    deleted_count, _ = GroupModel.objects.using(db_alias).filter(name__in=roles_to_delete).delete()
    print(f"Deleted {deleted_count} roles.")

class Migration(migrations.Migration):

    dependencies = [
        ('api_v1_organization', '0001_initial'),
        # Add dependencies on other apps whose permissions are used, e.g., contact
        ('contact', '0001_initial'), 
    ]

    operations = [
        migrations.RunPython(
            create_initial_organization_roles,
            reverse_code=remove_initial_organization_roles # Add reverse operation
        ),
    ] 