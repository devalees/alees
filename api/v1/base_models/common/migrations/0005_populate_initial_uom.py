# Generated by Django 5.0.6 on 2024-05-03 18:22

from django.db import migrations
from django.db.models import Q # Import Q for potential lookups

# Define initial data structure
INITIAL_UOM_TYPES = [
    {'code': 'LENGTH', 'name': 'Length', 'description': 'Measurement of distance.'},
    {'code': 'MASS', 'name': 'Mass', 'description': 'Measurement of mass or weight.'},
    {'code': 'COUNT', 'name': 'Count', 'description': 'Measurement by discrete units.'},
    {'code': 'VOLUME', 'name': 'Volume', 'description': 'Measurement of volume.'},
    {'code': 'TIME', 'name': 'Time', 'description': 'Measurement of duration.'},
    {'code': 'AREA', 'name': 'Area', 'description': 'Measurement of surface area.'},
    {'code': 'ENERGY', 'name': 'Energy', 'description': 'Measurement of energy.'},
    {'code': 'TEMP', 'name': 'Temperature', 'description': 'Measurement of temperature.'},
    # Add other common types as needed
]

INITIAL_UNITS = [
    # Length
    {'code': 'M', 'name': 'Meter', 'symbol': 'm', 'uom_type_code': 'LENGTH'},
    {'code': 'CM', 'name': 'Centimeter', 'symbol': 'cm', 'uom_type_code': 'LENGTH'},
    {'code': 'MM', 'name': 'Millimeter', 'symbol': 'mm', 'uom_type_code': 'LENGTH'},
    {'code': 'KM', 'name': 'Kilometer', 'symbol': 'km', 'uom_type_code': 'LENGTH'},
    {'code': 'IN', 'name': 'Inch', 'symbol': 'in', 'uom_type_code': 'LENGTH'},
    {'code': 'FT', 'name': 'Foot', 'symbol': 'ft', 'uom_type_code': 'LENGTH'},
    {'code': 'YD', 'name': 'Yard', 'symbol': 'yd', 'uom_type_code': 'LENGTH'},
    {'code': 'MI', 'name': 'Mile', 'symbol': 'mi', 'uom_type_code': 'LENGTH'},
    # Mass
    {'code': 'KG', 'name': 'Kilogram', 'symbol': 'kg', 'uom_type_code': 'MASS'},
    {'code': 'G', 'name': 'Gram', 'symbol': 'g', 'uom_type_code': 'MASS'},
    {'code': 'MG', 'name': 'Milligram', 'symbol': 'mg', 'uom_type_code': 'MASS'},
    {'code': 'LB', 'name': 'Pound', 'symbol': 'lb', 'uom_type_code': 'MASS'},
    {'code': 'OZ', 'name': 'Ounce', 'symbol': 'oz', 'uom_type_code': 'MASS'},
    # Count
    {'code': 'EA', 'name': 'Each', 'symbol': 'ea', 'uom_type_code': 'COUNT'},
    {'code': 'DZ', 'name': 'Dozen', 'symbol': 'dz', 'uom_type_code': 'COUNT'},
    {'code': 'BOX', 'name': 'Box', 'symbol': 'box', 'uom_type_code': 'COUNT'}, # Generic box
    {'code': 'CASE', 'name': 'Case', 'symbol': 'case', 'uom_type_code': 'COUNT'},
    {'code': 'PACK', 'name': 'Pack', 'symbol': 'pack', 'uom_type_code': 'COUNT'},
    # Volume
    {'code': 'L', 'name': 'Liter', 'symbol': 'L', 'uom_type_code': 'VOLUME'},
    {'code': 'ML', 'name': 'Milliliter', 'symbol': 'mL', 'uom_type_code': 'VOLUME'},
    {'code': 'GAL', 'name': 'Gallon (US)', 'symbol': 'gal', 'uom_type_code': 'VOLUME'},
    {'code': 'QT', 'name': 'Quart (US)', 'symbol': 'qt', 'uom_type_code': 'VOLUME'},
    # Time
    {'code': 'SEC', 'name': 'Second', 'symbol': 's', 'uom_type_code': 'TIME'},
    {'code': 'MIN', 'name': 'Minute', 'symbol': 'min', 'uom_type_code': 'TIME'},
    {'code': 'HR', 'name': 'Hour', 'symbol': 'hr', 'uom_type_code': 'TIME'},
    {'code': 'DAY', 'name': 'Day', 'symbol': 'd', 'uom_type_code': 'TIME'},
    {'code': 'WK', 'name': 'Week', 'symbol': 'wk', 'uom_type_code': 'TIME'},
    # Area
    {'code': 'SQM', 'name': 'Square Meter', 'symbol': 'm²', 'uom_type_code': 'AREA'},
    {'code': 'SQFT', 'name': 'Square Foot', 'symbol': 'ft²', 'uom_type_code': 'AREA'},
    # Energy
    {'code': 'J', 'name': 'Joule', 'symbol': 'J', 'uom_type_code': 'ENERGY'},
    {'code': 'KWH', 'name': 'Kilowatt-Hour', 'symbol': 'kWh', 'uom_type_code': 'ENERGY'},
    # Temperature
    {'code': 'CEL', 'name': 'Celsius', 'symbol': '°C', 'uom_type_code': 'TEMP'},
    {'code': 'FAH', 'name': 'Fahrenheit', 'symbol': '°F', 'uom_type_code': 'TEMP'},
    {'code': 'K', 'name': 'Kelvin', 'symbol': 'K', 'uom_type_code': 'TEMP'},
    # Add other common units as needed
]

def populate_uom_types(apps, schema_editor):
    """Populates the UomType table with initial data."""
    UomType = apps.get_model('api_v1_common', 'UomType')
    db_alias = schema_editor.connection.alias

    for type_data in INITIAL_UOM_TYPES:
        UomType.objects.using(db_alias).update_or_create(
            code=type_data['code'],
            defaults=type_data
        )

def populate_units(apps, schema_editor):
    """Populates the UnitOfMeasure table with initial data."""
    UomType = apps.get_model('api_v1_common', 'UomType')
    UnitOfMeasure = apps.get_model('api_v1_common', 'UnitOfMeasure')
    db_alias = schema_editor.connection.alias

    # Cache UomType instances for efficiency
    type_cache = {ut.code: ut for ut in UomType.objects.using(db_alias).all()}

    for unit_data in INITIAL_UNITS:
        uom_type_code = unit_data.pop('uom_type_code')
        uom_type_instance = type_cache.get(uom_type_code)

        if uom_type_instance:
            # Add the actual foreign key instance to the defaults
            unit_data['uom_type'] = uom_type_instance
            UnitOfMeasure.objects.using(db_alias).update_or_create(
                code=unit_data['code'],
                defaults=unit_data
            )
        else:
            # Handle case where UomType might be missing (shouldn't happen if populate_uom_types ran first)
            print(f"Warning: UomType with code '{uom_type_code}' not found for unit '{unit_data['code']}'. Skipping.")


def reverse_populate_uom_types(apps, schema_editor):
    """Removes the initial UomType data (optional)."""
    UomType = apps.get_model('api_v1_common', 'UomType')
    db_alias = schema_editor.connection.alias
    codes_to_delete = [t['code'] for t in INITIAL_UOM_TYPES]
    UomType.objects.using(db_alias).filter(code__in=codes_to_delete).delete()


def reverse_populate_units(apps, schema_editor):
    """Removes the initial UnitOfMeasure data (optional)."""
    UnitOfMeasure = apps.get_model('api_v1_common', 'UnitOfMeasure')
    db_alias = schema_editor.connection.alias
    codes_to_delete = [u['code'] for u in INITIAL_UNITS]
    UnitOfMeasure.objects.using(db_alias).filter(code__in=codes_to_delete).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api_v1_common', '0004_uomtype_unitofmeasure'), # Depends on the previous schema migration
    ]

    operations = [
        migrations.RunPython(populate_uom_types, reverse_code=reverse_populate_uom_types),
        migrations.RunPython(populate_units, reverse_code=reverse_populate_units),
    ]
