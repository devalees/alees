# Generated by Django 5.0.4 on 2024-05-03 05:21

from django.db import migrations

INITIAL_STATUSES = [
    # Slug, Name, Category (Optional), Description (Optional), Color (Optional)
    ('draft', 'Draft', 'General', 'Record is being drafted, not yet active.', '#AAAAAA'),
    ('active', 'Active', 'General', 'Record is active and in use.', '#4CAF50'),
    ('inactive', 'Inactive', 'General', 'Record is not currently active but may be reactivated.', '#FF9800'),
    ('archived', 'Archived', 'General', 'Record is archived and typically read-only.', '#9E9E9E'),
    ('pending', 'Pending', 'Process', 'Waiting for action or approval.', '#2196F3'),
    ('pending_approval', 'Pending Approval', 'Approval', 'Waiting for approval step.', '#2196F3'),
    ('approved', 'Approved', 'Approval', 'Record has been approved.', '#4CAF50'),
    ('rejected', 'Rejected', 'Approval', 'Record has been rejected.', '#F44336'),
    ('completed', 'Completed', 'Process', 'Process or task is finished.', '#00BCD4'),
    ('cancelled', 'Cancelled', 'Process', 'Process or task was cancelled.', '#795548'),
    # Add other common statuses as needed
]

def populate_statuses(apps, schema_editor):
    Status = apps.get_model('api_v1_common', 'Status') # Use correct app_label
    db_alias = schema_editor.connection.alias

    statuses_to_add = []
    for slug, name, category, desc, color in INITIAL_STATUSES:
        statuses_to_add.append(
            Status(slug=slug, name=name, category=category or '', description=desc or '', color=color or '')
        )
    # Use ignore_conflicts=True to avoid errors if statuses already exist
    Status.objects.using(db_alias).bulk_create(statuses_to_add, ignore_conflicts=True)
    print(f"\nPopulated/updated {len(statuses_to_add)} statuses.") # Added newline for clarity

def remove_statuses(apps, schema_editor):
    # Removing statuses might break foreign key constraints if they are in use.
    # It's generally safer to leave them or mark them as inactive.
    # If removal is necessary, ensure dependent objects are handled first.
    # Status = apps.get_model('api_v1_common', 'Status')
    # db_alias = schema_editor.connection.alias
    # slugs_to_remove = [s[0] for s in INITIAL_STATUSES]
    # Status.objects.using(db_alias).filter(slug__in=slugs_to_remove).delete()
    # print(f"\nRemoved {len(slugs_to_remove)} statuses.")
    pass # Usually safe to leave statuses in place on reversal


class Migration(migrations.Migration):

    dependencies = [
        ('api_v1_common', '0001_initial'), # Depends on the previous schema migration
    ]

    operations = [
        migrations.RunPython(populate_statuses, reverse_code=remove_statuses),
    ]
