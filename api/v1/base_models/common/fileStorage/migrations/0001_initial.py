# Generated by Django 4.2.20 on 2025-05-02 19:17

import api.v1.base_models.common.fileStorage.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("api_v1_organization", "0005_alter_organizationmembership_role"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="FileStorage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Timestamp when the record was created.",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when the record was last updated.",
                        verbose_name="Updated At",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="The actual stored file.",
                        upload_to=api.v1.base_models.common.fileStorage.models.get_file_upload_path,
                        verbose_name="File",
                    ),
                ),
                (
                    "original_filename",
                    models.CharField(
                        db_index=True,
                        help_text="Filename as it was originally uploaded.",
                        max_length=255,
                        verbose_name="Original Filename",
                    ),
                ),
                (
                    "file_size",
                    models.PositiveBigIntegerField(
                        blank=True,
                        help_text="Size of the file in bytes.",
                        null=True,
                        verbose_name="File Size (bytes)",
                    ),
                ),
                (
                    "mime_type",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Detected MIME type of the file.",
                        max_length=100,
                        verbose_name="MIME Type",
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Custom metadata associated with the file.",
                        verbose_name="Custom Fields",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created the record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="The Organization this record belongs to.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_set",
                        to="api_v1_organization.organization",
                        verbose_name="Organization",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="Tags associated with the file.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated the record.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
                (
                    "uploaded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who uploaded the file.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="uploaded_files",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Uploaded By",
                    ),
                ),
            ],
            options={
                "verbose_name": "File Storage Record",
                "verbose_name_plural": "File Storage Records",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["organization"], name="file_storage_organiz_idx"
                    ),
                    models.Index(
                        fields=["uploaded_by"], name="file_storage_upl_by_idx"
                    ),
                    models.Index(fields=["mime_type"], name="file_storage_mime_idx"),
                    models.Index(
                        fields=["original_filename"], name="file_storage_orig_fname_idx"
                    ),
                ],
            },
        ),
    ]
